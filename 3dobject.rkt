#lang racket

(provide (all-defined-out))

(struct tri ((v1) (v2) (v3) (vt1) (vt2) (vt3)))
(struct vertex ((x) (y) (z)))
(struct tvertex ((u) (v)))

(define 3dObject%
  (class object%
    (super-new)
    ;tris: a vector of all the triangles.
    (init-field tris)
    (field (x 0)
           (y 0)
           (z 0)
           (rotx 0)
           (roty 0)
           (rotz 0))))

(define (load-model filename)
  (let ((file (open-input-file filename #:mode 'text))
        (tri-list '())
        (v-list '())
        (vt-list '())
        (materials '())
        (objects '())
        (mtllib #f)
        (objName #f)
        (mtlName #f))
    (define (readloop)
      (unless (eof-object? (peek-char file))
        (if (eq? (peek-char file) #\u0023)
            (read-line file)
            (let ((line (regexp-split #px" " (read-line file))))
              
              (cond ((equal? (car line) "v")
                     (set! v-list (append v-list (list (vertex (string->number (cadr line)) 
                                                         (string->number (caddr line)) 
                                                         (string->number (cadddr line))))))
                     (display "vertex"))
                    ((equal? (car line) "vt")
                     (set! vt-list (append vt-list (list (tvertex (string->number (cadr line)) 
                                                             (string->number (caddr line)))))))
                    ((equal? (car line) "mtllib")
                     (set! mtllib (cadr line)))
                    ((equal? (car line) "o")
                     (set! objName (cadr line)))
                    ((equal? (car line) "usemtl")
                     (set! mtlName (cadr line)))
                    ((equal? (car line) "f")
                     (when (and (> (length v-list) 2) (> (length vt-list) 2))
                       (let ((vd1 (cons (car (regexp-split #px"/" (cadr line))) (cadr (regexp-split #px"/" (cadr line)))))
                             (vd2 (cons (car (regexp-split #px"/" (caddr line))) (cadr (regexp-split #px"/" (caddr line)))))
                             (vd3 (cons (car (regexp-split #px"/" (cadddr line))) (cadr (regexp-split #px"/" (cadddr line))))))
                         (set! tri-list (append tri-list (list (tri (list-ref v-list (- (string->number (car vd1)) 1))
                                                              (list-ref v-list (- (string->number (car vd2)) 1))
                                                              (list-ref v-list (- (string->number (car vd3)) 1))
                                                              (list-ref vt-list (- (string->number (cdr vd1)) 1))
                                                              (list-ref vt-list (- (string->number (cdr vd2)) 1))
                                                              (list-ref vt-list (- (string->number (cdr vd3)) 1)))))))))
                    )))
        (readloop)))
    (readloop)
    (close-input-port file)
    (new 3dObject% (tris (list->vector tri-list)))))


