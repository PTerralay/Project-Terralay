#lang racket

(provide X Y GX GY triggers AI interact-code)

(define X 320)
(define Y 128)
(define GX 10)
(define GY 4)
(define triggers (list
                  (list
                   (cons 'poll (lambda (char world)
                                 (and (eq? (send (send world get-player) getx) (send char getx))
                                      (eq? (send (send world get-player) gety) (send char gety)))))
                   (cons 'act (lambda (char world)
                                (display "GOTCHA YOU PRETTY PRETTY LITTLE GIRL! Now come here...\n"))))))

(define (interact-code)
  (display "Nom!"))

(define (AI monster player-x player-y ticks last-moved last-stepped-on world)
  (when (> ticks (+ (unbox last-moved) 20))
    (let ((direction 'stay)
          (direction-int (random 4))
          (distance-to-player-sqrd (+ (* (- player-x (send monster getx))
                                         (- player-x (send monster getx))) 
                                      (* (- player-y (send monster gety))
                                         (- player-y (send monster gety)))))
          (left-tile (send (send world get-current-map) gettile (- (send monster getx) 1) (send monster gety)))
          (right-tile (send (send world get-current-map) gettile (+ (send monster getx) 1) (send monster gety)))
          (up-tile (send (send world get-current-map) gettile (send monster getx) (- (send monster gety) 1)))
          (down-tile (send (send world get-current-map) gettile (send monster getx) (+ (send monster gety) 1))))
      
      (if (< distance-to-player-sqrd 100)
          (cond
            ((< (+ (* (- player-x (- (send monster getx) 1))
                      (- player-x (- (send monster getx) 1))) 
                   (* (- player-y (send monster gety))
                      (- player-y (send monster gety))))
                distance-to-player-sqrd)
             (if (and (send left-tile passable?)
                      (not (eq? (unbox last-stepped-on) left-tile)))
                 (set! direction 'left)
                 (set! direction (cond
                                   ((and (even? (quotient ticks 20))
                                         (send up-tile passable?)
                                         (not (eq? (unbox last-stepped-on) up-tile))) 'up)
                                   ((and (send down-tile passable?)
                                         (not (eq? (unbox last-stepped-on) down-tile))) 'down)
                                   ((and (send up-tile passable?)
                                         (not (eq? (unbox last-stepped-on) up-tile))) 'up)))))
            
            ((< (+ (* (- player-x (+ (send monster getx) 1))
                      (- player-x (+ (send monster getx) 1)))
                   (* (- player-y (send monster gety))
                      (- player-y (send monster gety))))
                distance-to-player-sqrd)
             (if (and (send right-tile passable?)
                      (not (eq? (unbox last-stepped-on) right-tile)))
                 (set! direction 'right)
                 (set! direction (cond
                                   ((and (even? (quotient ticks 20))
                                         (send up-tile passable?)
                                         (not (eq? (unbox last-stepped-on) up-tile))) 'up)
                                   ((and (send down-tile passable?)
                                         (not (eq? (unbox last-stepped-on) down-tile))) 'down)
                                   ((and (send up-tile passable?)
                                         (not (eq? (unbox last-stepped-on) up-tile))) 'up)))))
            
            ((< (+ (* (- player-x (send monster getx))
                      (- player-x (send monster getx)))
                   (* (- player-y (- (send monster gety) 1))
                      (- player-y (- (send monster gety) 1))))
                distance-to-player-sqrd)
             (if (and (send left-tile passable?)
                      (not (eq? (unbox last-stepped-on) up-tile)))
                 (set! direction 'up)
                 (set! direction (cond
                                   ((and (even? (quotient ticks 20))
                                         (send left-tile passable?)
                                         (not (eq? (unbox last-stepped-on) left-tile))) 'left)
                                   ((and (send right-tile passable?)
                                         (not (eq? (unbox last-stepped-on) right-tile))) 'right)
                                   ((and (send left-tile passable?)
                                         (not (eq? (unbox last-stepped-on) left-tile))) 'left)))))
            
            ((< (+ (* (- player-x (send monster getx))
                      (- player-x (send monster getx))) 
                   (* (- player-y (+ (send monster gety) 1))
                      (- player-y (+ (send monster gety) 1))))
                distance-to-player-sqrd)
             (if (and (send down-tile passable?)
                      (not (eq? (unbox last-stepped-on) down-tile)))
                 (set! direction 'down)
                 (set! direction (cond
                                   ((and (even? (quotient ticks 20))
                                         (send left-tile passable?)
                                         (not (eq? (unbox last-stepped-on) left-tile))) 'left)
                                   ((and (send right-tile passable?)
                                         (not (eq? (unbox last-stepped-on) right-tile))) 'right)
                                   ((and (send left-tile passable?)
                                         (not (eq? (unbox last-stepped-on) left-tile))) 'left))))))
          
          (case direction-int
            ((0) (set! direction 'stay))
            ((1) (set! direction 'left))
            ((2) (set! direction 'right))
            ((3) (set! direction 'up))
            ((4) (set! direction 'down))))
      
      (when (not (equal? direction 'stay))
        (set-box! last-stepped-on
              (send (send world get-current-map) gettile (send monster getx) (send monster gety)))
        (send monster move! direction)
        (set-box! last-moved ticks)))))