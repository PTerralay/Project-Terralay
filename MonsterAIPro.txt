; ska returnera en lista med direction-symboler som element
(define (get-path) 
  
  ;sparar tiles de som är passable i en associativ lista med antalet steg det har tagit att gå dit.
  (define (get-passable-neighbours monster)
    (let* ((monster-x (send monster getx))
           (monster-y (send monster gety))
           (left-tile (send (send world get-current-map) gettile (- monster-x 1) monster-y))
           (right-tile (send (send world get-current-map) gettile (+ monster-x 1) monster-y))
           (up-tile (send (send world get-current-map) gettile monster-x (- monster-y 1)))
           (down-tile (send (send world get-current-map) gettile monster-x (+ monster-y 1))))
      (when (send left-tile passable?)
        (cons steps left-tile))
      (when (send left-tile passable?)
        (cons steps right-tile))
      (when (send left-tile passable?)
        (cons steps up-tile))
      (when (send left-tile passable?)
        (cons steps down-tile))))
  
  ; frågar en tile om man har trampat på den tidigare oberoende av vilken path man är i  
  (define (stepped-on? tile path)
    (for-each (lambda (element)
                (eq? tile element))
              path))
  
  ; är vi på samma plats som player?
  (define (character-found? xpos ypos)
    (= 0 (+ (- (send player getx) xpos)
            (- (send player gety) ypos))))
  
  ; leta efter paths
  (let ((current-tile (send world 
  (get-passable-neighbours ))))))

; FINISH THIS SHIT!